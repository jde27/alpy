#+TITLE: Computing with alpy: quick-start guide
#+AUTHOR: Jonny Evans
#+LICENSE: GNU Public License

* What is alpy?

Short for "AL-gebra with PY-thon", alpy is (the beginnings of) a
computer algebra system written in Python, tailored towards
computations in triangulated A_\infty categories.

Specifically, it allows you to define an A_\infty-category A and to
perform basic calculations in the triangulated category of
A_\infty-modules over A.

For example, you can form the Yoneda module associated to an object of
A and twist it around other objects (that's basically all you can do
for now).

We stick to the notation and conventions established in Seidel's book
"Fukaya categories and Picard-Lefschetz theory", and refer to Chapter
1 of that book for an action-packed, whistlestop introduction to the
theory of A_\infty-categories.

* Setting up fields and categories

** Fields

The categories are K-linear over a field K and there are modules for
defining and creating different fields. Pre-defined fields include the
rational numbers and Z/p, accessed with:

    K = rationals.QQ()
 or K = finite_fields.FF(p)

You can define your own fields by writing your own module which
defines numbers in the field and operations for adding, subtracting,
multiplying, dividing, inverting them etc. together with a function
for converting integers into field elements.

** A_\infty-categories

There is a pre-defined source of A_\infty categories (over any given
field K) associated to directed planar graphs. You can encode a
directed graph with

  G=DynkinGraph({1,2,3,4},{1:{2,3,4}, {2:3}, {3:4}})

which would give a graph with four vertices 1,2,3,4 and arrows:

1-->2, 1-->3, 1-->4, 2-->3, 3-->4.

You can access the associated category with G.categorify(). In good
cases, these categories coincide with the Fukaya categories of Milnor
fibres of 2-variable Brieskorn-Pham singularities,

 {(x,y,z_1,...,z_{N-1})\in C^{N+1} : x^p+y^q+z_1^2+...+z_{N-1}^2 = 1},

and can be accessed with:

 A = BP(p,q,K,N).

These are currently only guaranteed to be the correct categories in
characteristic 2 - I have not been careful with signs in setting up
the category; moreover, we only know that this description of the
category holds when N>2. If you want to check that a given category A
(pre-defined or your own) satisfies the A_\infty-equations, you can
use:

  A.verify()

The objects of the categories can be indexed using an arbitrary set,
but the pre-defined categories are indexed by integers (see
[[#brieskorn-pham]] if you want to know which objects are which in these
pre-defined categories).

* Working with modules

** Yoneda modules

Given an A_\infty category A, to get the Yoneda module associated to
the object X, use

  A.yoneda(X)

So, for example, if X is the object 5 in BP(3,4,K,N),

  A.yoneda(5)

will return the corresponding Yoneda module.

** Twists

To twist a module M around an object X, use

  M.twist(X)

** Verifying modules

The code is still relatively untested, so while I hope that performing
standard operations on modules returns modules, I do not guarantee it!
You can check for yourself by verifying that your newly-minted module
satsifies the A_\infty-module equations:

  M.verify()

** Ext-groups

Given an A_\infty-module M over an A_\infty category A, each object X
in A gives you a cochain complex M[X] with differential M.mu(X) along
with higher products M.mu(X_0,...,X_{d-1}) (e.g. the action of A on
M). Often, however, all you want to know is the cohomology of this
cochain complex. The cochain complex can be returned with

  M.cpx(X)

and the cohomology can be computed using

  M.cpx(X).cohomology()

The result is simply a Python dictionary like this:

  {0: 2, 1: 7, 8: 3}

which would mean that

  dim(H^0) = 2,
  dim(H^1) = 7,
  dim(H^8) = 3.

To compute the total Ext-group (i.e the direct sum of all these
cohomology groups over all objects X in A), use:

  M.total()

To compute the difference between the maximal and minimal degrees in
which cohomology is supported, use:

  M.width()

* Pre-defined A_\infty categories

** A_\infty categories from directed planar graphs

Consider a directed planar graph with vertices V and arrows A. We
define an A_\infty category whose objects are the vertices V and whose
morphism spaces hom(X,Y) are as follows:

+ if X=Y then hom(X,X) = K in degrees 0 and N
+ if there is an arrow X-->Y,
  + hom(X,Y) = K in degree 0
  + hom(Y,X) = K in degree N
+ otherwise, hom(X,Y)=0

There are only \mu^2-products in this category. They can be completely
determined by the conditions that:

+ hom(X,X) is the cohomology ring of the N-sphere,
+ the category is N-Calabi-Yau,
+ if there is a directed triangle in the graph:
  X-a->Y-b->Z and X-c->Z
  then c=\mu^2(b,a).

** Fukaya categories of Brieskorn-Pham Milnor fibres
:PROPERTIES:
:CUSTOM_ID: brieskorn-pham
:END:

Consider the polynomial F=x^p+y^q+z_1^2+...+z_{N-1}^2. The zero-locus
F=0 of this polynomial is called a Brieskorn-Pham (BP) singularity,
and its Milnor fibre is the (complex) N-dimensional affine variety
defined by F=1. Milnor proved that the Milnor fibre of any
hypersurface singularity of complex dimension N admits a deformation
retract onto a collection of (real) N-dimensional Lagrangian spheres
called the vanishing cycles. In the case of a BP singularity, one can
find representative vanishing cycles which intersect pairwise in
either zero or one point according to the following pattern:

     1 ---------> 2 ------> 3 --> ... ---> (p-1)
     | \          | \       | \              |
     |  +----__   |  +--_   |                |
     |         \  |      \  |             \  |
     V          > V       > V              > V
     p --------> p+1 --->  p+2 -> ... --> 2(p-1)
     | \          | \       | \              |
     V            V         V                V
    ...          ...       ...              ...
     |            |         |             \  |
     V            V         V              > V
1+(p-1)(q-2) -->...................---> (p-1)(q-1)

where each vertex denotes a vanishing cycle and each directed arrow
indicates an intersection point (the direction of the arrow encodes
information about the Floer intersection index of this intersection
point). Namely, we can choose gradings on the Lagrangian vanishing
cycles to ensure that, if there is an arrow X-->Y, the unique
intersection point between X and Y has grading 0 when considered in
the Floer complex hom(X,Y) and grading N when considered in the Floer
complex hom(Y,X). The subcategory of the Fukaya category of the Milnor
fibre comprising these vanishing cycles is now precisely the category
associated to this directed planar graph.
* Example session

Start a Python session and import the following:

  from a_infinity import *

You will need to create a field to work over, and so import whichever
field-related modules you need:

  import finite_fields as ff
  import rationals as QQ

Now create a field and an A_\infty-category as desired:

  K=QQ.QQ()  # Would create a copy of the rational numbers
  L=ff.FF(2) # Would create a copy of Z/2

  A=BP(3,5,K,2)

(for example, this would create a copy of the Fukaya category (over K)
of the Milnor fibre x^p+y^q+z^2=1).

Now create some A_\infty-modules and start twisting them:

  M=A.yoneda(1)
  w=[2,3,4,1,4,5,2,6]
  for i in w:
    M=M.twist(i)
  print(M.total())

This would return the total ext-group of

  t_6 t_2 t_5 t_4 t_1 t_4 t_3 t_2(M)

where M is the Yoneda module corresponding to the object 1 and t_k is
the twist functor around object k.
